/*Skeleton Code for REAF AUV 2017-2018
Last Edit: Shawn Hinkle and Laura Austin 2/28/2018*/

#include <Servo.h>  //include Servo library for thrusters

Servo thruster1;    //instantiate thrusters 
Servo thruster2;
Servo thruster3;
Servo thruster4;
Servo thruster5;
Servo thruster6;
Servo thruster7;
Servo thruster8;

void setup() {
  Serial.begin(9600); //serial monitor start
  while (!Serial);  //wait until serial is ready
  delay(1000);    //1 second delay for intialization
  Serial.write("Serial begin");

  thruster1.attach(2);  //define pin that thruster is in
  thruster2.attach(3);
  thruster3.attach(4);
  thruster4.attach(5);
  thruster5.attach(6);
  thruster6.attach(7);
  thruster7.attach(8);
  thruster8.attach(9);
  
  thruster1.writeMicroseconds(1500); //send stop signal to ESC to intialize
  thruster2.writeMicroseconds(1500);
  thruster3.writeMicroseconds(1500);
  thruster4.writeMicroseconds(1500);
  thruster5.writeMicroseconds(1500);
  thruster6.writeMicroseconds(1500);
  thruster7.writeMicroseconds(1500);
  thruster8.writeMicroseconds(1500);
  delay(1000);  //1 second delay to allow ESC to recognize signal
}

void loop() {
  if (Serial.available()) {
    int input;
    input = Serial.read();
    Serial.write(input);
    delay(1000);
    
    /*logic for translating communication
     * bit 0: thruster number (1-8)
     * bits 1-4: power (1100 - 1900)
    */ 
    int thrustnum = input/10000;
    int pwr = input%1000;
    
    /*1100 = full power reverse 
     * 1499 = low power reverse
     * 1500 = stop
     * 1501 = low power forward
     * 1900 = full power forward
     */
     Serial.write("Thruster: ", thrustnum);
     delay(1000);
     Serial.write("\nPower: ", pwr);
     delay(1000);
     
     /*if ((pwr/1000 != 1)){
        Serial.write("\nERROR OUT OF RANGE: ", pwr);
        delay(5000);
        return 1;
     }
     else{
         switch(thrustnum){
            case 1:
              thruster1.writeMicroseconds(pwr);
              break;
            case 2:
              thruster2.writeMicroseconds(pwr);
              break;
            case 3:
              thruster3.writeMicroseconds(pwr);
              break;
            case 4:
              thruster4.writeMicroseconds(pwr);
              break;
            case 5:
              thruster5.writeMicroseconds(pwr);
              break;
            case 6:
              thruster6.writeMicroseconds(pwr);
              break;
            case 7:
              thruster7.writeMicroseconds(pwr);
              break;
            case 8:
              thruster8.writeMicroseconds(pwr);
              break;
            default:
              break;

         }
     } */
     
  }

}
